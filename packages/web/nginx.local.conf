user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  # For mapping Connection header to presence of Upgrade header to support HMR websockets.
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  # DNS resolution works at startup via `depends_on` for `web` service in docker-compose.yml.
  upstream dev_server {
    server ui:5173;
  }

  include /etc/nginx/mime.types;
  include /etc/nginx/conf.d/core/upstreams.conf;
  include /etc/nginx/conf.d/core/compression.conf;
  include /etc/nginx/conf.d/core/logging.conf;

  default_type application/octet-stream;
  log_format main '$request_method $request_uri $status $body_bytes_sent - $request_time s';
  access_log /var/log/nginx/access.log main;
  sendfile on;
  keepalive_timeout 65;

  server {
    # Redirect server configuration
    listen 80 default_server;
    server_name busmap.localhost;
    server_tokens off;

    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 80;
    listen 443 ssl;
    server_name busmap.localhost localhost;
    index index.html;

    ssl_certificate /etc/nginx/certs/busmap.localhost.pem;
    ssl_certificate_key /etc/nginx/certs/busmap.localhost-key.pem;

    location / {
      resolver 8.8.8.8 valid=30s;

      location ~ /restbus {
        access_log /var/log/nginx/api.log api;
        proxy_pass http://api_server;
      }

      proxy_pass http://dev_server;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }
  }
}
